package DROP_BOX;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

/*

In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of
those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue
until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.

We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple
nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.



Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1

 */

/*
BFS with a list of infected nodes. Try removing each one, if the new candidate is (a lower node number and == amount of
infected) or a less amount of infected then update the resulting answer node.
 */
public class MinimizeMalwareSpread {
    private int spread(int [][] graph, Set<Integer> infected){
        Set<Integer> bad = new HashSet<>(infected);
        Queue<Integer> bfs= new LinkedList<>();
        for(Integer initialInfected:infected){
            bfs.add(initialInfected);
        }
        while(!bfs.isEmpty()){
            Integer next = bfs.remove();
            for(int j=0; j<graph[next].length;++j){
                if(graph[next][j]==1&& !bad.contains(j)){
                    bad.add(j);
                    bfs.add(j);
                }
            }
        }
        //return how many total were infected after spreading
        return bad.size();
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Set<Integer> infected = new HashSet<>();
        for(int initialInfected: initial){
            infected.add(initialInfected);
        }
        int min = Integer.MAX_VALUE;
        int ans = 0;
        for(int ignore = 0; ignore<initial.length;++ignore){
            int ignoreNumb = initial[ignore];
            infected.remove(ignoreNumb);
            int amount = spread(graph,infected);
            if(amount<min ||(amount==min&& initial[ignore]<ans)){
                ans=initial[ignore];
                min=amount;
            }
            infected.add(ignoreNumb);
        }
        return ans;
    }
}



//time complexity would just be O(V+E) * k for the vertices and edges of the graph since its standard BFS,
// where k is the number of initial infected nodes (* may be)